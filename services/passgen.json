{
  "type": "app-service",
  "name": "passgen",
  "description": "## generatePassword(passwordSize, includeUpperCase, includeLowerCase, includeNumbers)\r\n\r\nGenerates a strong and unique password based on the specified parameters.\r\n\r\n**Parameters:**\r\n\r\n* **passwordSize:** (number) The desired length of the password.\r\n* **includeUpperCase:** (boolean) Whether or not to include uppercase letters in the password.\r\n* **includeLowerCase:** (boolean) Whether or not to include lowercase letters in the password.\r\n* **includeNumbers:** (boolean) Whether or not to include numbers in the password.\r\n\r\n**Returns:**\r\n\r\n(string) The generated password.\r\n\r\n**Example:**\r\n\r\n```javascript\r\nconst passwordSuggester = new PasswordSuggester();\r\nconst password = passwordSuggester.generatePassword(15, true, true, true);\r\nconsole.log(password);\r\n",
  "singleton": true,
  "variables": [
    {
      "name": "password",
      "type": "property",
      "description": "",
      "value": ""
    },
    {
      "name": "generatePassword",
      "type": "method",
      "description": "## generatePassword(passwordSize, includeUpperCase, includeLowerCase, includeNumbers)\r\n\r\nGenerates a strong and unique password based on the specified parameters.\r\n\r\n**Parameters:**\r\n\r\n* **passwordSize:** (number) The desired length of the password.\r\n* **includeUpperCase:** (boolean) Whether or not to include uppercase letters in the password.\r\n* **includeLowerCase:** (boolean) Whether or not to include lowercase letters in the password.\r\n* **includeNumbers:** (boolean) Whether or not to include numbers in the password.\r\n\r\n**Returns:**\r\n\r\n(string) The generated password.\r\n\r\n**Example:**\r\n\r\n```javascript\r\nconst password = passwordSuggester.generatePassword(15, true, true, true);\r\nconsole.log(password);\r\n",
      "body": "let password = '';\n\n  for (let i = 1; i < passwordSize && i > 0; i++) {\n    let characterSet = '';\n\n    if (includeUpperCase) {\n      characterSet += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    }\n\n    if (includeLowerCase) {\n      characterSet += 'abcdefghijklmnopqrstuvwxyz';\n    }\n\n    if (includeNumbers) {\n      characterSet += '0123456789';\n    }\n\n    password += characterSet.charAt(Math.floor(Math.random() * characterSet.length));\n  }\n\n  return password;\n\n",
      "invokeOnLoad": false,
      "isAsync": false,
      "returnType": {
        "name": "any"
      },
      "parameters": [
        "passwordSize",
        "includeUpperCase",
        "includeLowerCase",
        "includeNumbers"
      ]
    },
    {
      "name": "generatepassword",
      "type": "open-api",
      "id": "6569718d43740894c55ed55f"
    },
    {
      "name": "generateUsingApi",
      "type": "method",
      "description": "",
      "body": "this.generatepassword.getV1Passwordgenerator({\n    length: 10,\n    xApiKey: \"nAW5l1O1pB2IIWJ3GlqZKQ==E3esMom19T1bMUNQ\"\n}).then(result => {\n    console.log(result)\n})",
      "invokeOnLoad": false,
      "isAsync": false,
      "returnType": {
        "name": "any"
      },
      "parameters": []
    },
    {
      "name": "generateWithPasswordinator",
      "type": "method",
      "description": "",
      "body": "fetch('https://passwordinator.onrender.com')\n.then((res) => res.json())\n.then((data) => {document.getElementById('passwordh1').innerHTML = JSON.stringify(data.data)})",
      "invokeOnLoad": false,
      "isAsync": false,
      "returnType": {
        "name": "any"
      },
      "parameters": []
    }
  ],
  "visible": [
    {
      "0": "r",
      "1": "a",
      "2": "n",
      "3": "d",
      "4": "o",
      "5": "m"
    },
    {
      "0": "d",
      "1": "e",
      "2": "c",
      "3": "l",
      "4": "a",
      "5": "r",
      "6": "e",
      "7": "R",
      "8": "a",
      "9": "n",
      "10": "d",
      "11": "o",
      "12": "m"
    },
    {
      "0": "g",
      "1": "e",
      "2": "n",
      "3": "e",
      "4": "r",
      "5": "a",
      "6": "t",
      "7": "e",
      "8": "P",
      "9": "a",
      "10": "s",
      "11": "s",
      "12": "w",
      "13": "o",
      "14": "r",
      "15": "d"
    },
    {
      "0": "g",
      "1": "e",
      "2": "n",
      "3": "e",
      "4": "r",
      "5": "a",
      "6": "t",
      "7": "e",
      "8": "U",
      "9": "s",
      "10": "i",
      "11": "n",
      "12": "g",
      "13": "A",
      "14": "p",
      "15": "i"
    },
    {
      "0": "g",
      "1": "e",
      "2": "n",
      "3": "e",
      "4": "r",
      "5": "a",
      "6": "t",
      "7": "e",
      "8": "W",
      "9": "i",
      "10": "t",
      "11": "h",
      "12": "P",
      "13": "a",
      "14": "s",
      "15": "s",
      "16": "w",
      "17": "o",
      "18": "r",
      "19": "d",
      "20": "i",
      "21": "n",
      "22": "a",
      "23": "t",
      "24": "o",
      "25": "r"
    },
    "generateWithPasswordinator",
    "generateUsingApi",
    "generatePassword",
    "password"
  ]
}